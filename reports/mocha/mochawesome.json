{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2020-06-18T17:35:05.503Z",
    "end": "2020-06-18T17:35:07.443Z",
    "duration": 1940,
    "testsRegistered": 16,
    "passPercent": 6.25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 15,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "1d0f253a-8131-4b84-a239-a3ad9398e3ec",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
          "title": "design_system_page",
          "fullFile": "C:\\src\\codecept_test\\tests\\buttons_allure_test.js",
          "file": "\\tests\\buttons_allure_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "98ab2f1e-b537-480b-ab95-2efeec0570d3",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "design_system_page \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 350,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "4b53a5e3-b9c2-43b8-842c-e290ece6ad6d",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "design_system_page \"before each\" hook: Before",
              "timedOut": false,
              "duration": 457,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I.amOnPage(demo_page_url);",
              "err": {},
              "uuid": "3c69cbc1-362e-4955-9ddb-b04592ec7c4d",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "design_system_page \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "b5d5d75f-f88e-4e04-aec8-6858fede00bf",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "design_system_page \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 165,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "8f6e0f87-ff16-458c-9ae6-9c8262b4abb1",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Verify each button without any action @buttons @simple @element",
              "fullTitle": "design_system_page: Verify each button without any action @buttons @simple @element",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let filePrefix = locators.prefix.plain;\nconsole.log(\"Number of elements\"+numOfElements);\n  \nfor (let current=1; current<=numOfElements; current++) {\n    let btnSelector = elemTemplateSelector.getCurrent(current);\n    let btnText = await I.grabTextFrom(btnSelector);\n    let screenshotName = filePrefix + btnText.toFileName(); \n// Taking Screenshot\n    I.screenshotElement(btnSelector, screenshotName);\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotName+\".png\", {prepareBaseImage: false, tolerance: 0}); \n    }\n}",
              "err": {},
              "uuid": "4f76ec65-135b-4489-8c2e-5ddbcc51fe11",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify each button on mouse over @buttons @action @hover @element",
              "fullTitle": "design_system_page: Verify each button on mouse over @buttons @action @hover @element",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let filePrefix = locators.prefix.hover;\nconsole.log(\"Number of elements\"+numOfElements);\n  \nfor (let current=1; current<=numOfElements; current++) {\n    let btnSelector = elemTemplateSelector.getCurrent(current);\n    let btnText = await I.grabTextFrom(btnSelector);\n    let screenshotName = filePrefix + btnText.toFileName(); \n// Moving Mouse to Element\n    I.moveCursorTo(btnSelector,5,5);\n  // Taking Screenshot\n    I.screenshotElement(btnSelector, screenshotName);\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotName+\".png\", {prepareBaseImage: false, tolerance: 0}); \n    }\n}",
              "err": {},
              "uuid": "2ee9b413-6299-478f-b236-bca85117fbc2",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify each button on click @buttons @action @click @element",
              "fullTitle": "design_system_page: Verify each button on click @buttons @action @click @element",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let filePrefix = locators.prefix.click;\nconsole.log(\"Number of elements\"+numOfElements);\n  \nfor (let current=1; current<=numOfElements; current++) {\n    let btnSelector = elemTemplateSelector.getCurrent(current);\n    let btnText = await I.grabTextFrom(btnSelector);\n    let screenshotName = filePrefix + btnText.toFileName(); \n// Click on Element\n    I.click(btnSelector);\n  // Taking Screenshot\n    I.screenshotElement(btnSelector, screenshotName);\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotName+\".png\", {prepareBaseImage: false, tolerance: 0}); \n    }\n}",
              "err": {},
              "uuid": "43a3356e-e90e-4edc-b486-c242ca732a6a",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify block of buttons @buttons @simple @block",
              "fullTitle": "design_system_page: Verify block of buttons @buttons @simple @block",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let blockSelector = \"#testblock\";\nlet screenshotName = \"Btns_Block\";\n  // Taking Screenshot\n    I.screenshotElement(blockSelector, screenshotName);\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotName+\".png\", {prepareBaseImage: false, tolerance: 0}); \n}",
              "err": {},
              "uuid": "a6a21824-928e-4178-9f1a-1adf6b7b7a04",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify top and bottom part of the page @buttons @simple @pagetest",
              "fullTitle": "design_system_page: Verify top and bottom part of the page @buttons @simple @pagetest",
              "timedOut": false,
              "duration": 940,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let screenshotNameTop = \"Btns_Page_Top.png\";\nlet screenshotNameBottom = \"Btns_Page_Bottom.png\";\n// Scrolling to Top and Taking Screenshot \n    I.scrollPageToTop();\n    I.saveScreenshot(screenshotNameTop,false);\n// Scrolling to Bottom and Taking Screenshot \n    I.scrollPageToBottom();\n    I.saveScreenshot(screenshotNameBottom,false);\n// Comparing both previously taken screenshots\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotNameTop, {prepareBaseImage: false, tolerance: 0}); \n        I.seeVisualDiff(screenshotNameBottom, {prepareBaseImage: false, tolerance: 0}); \n    }",
              "err": {},
              "uuid": "2a6c9e3a-61df-4cc3-a77e-65e9763adccc",
              "parentUUID": "a065ed06-f65b-4d8d-89a4-25689d648ee1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a6c9e3a-61df-4cc3-a77e-65e9763adccc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [
            "4f76ec65-135b-4489-8c2e-5ddbcc51fe11",
            "2ee9b413-6299-478f-b236-bca85117fbc2",
            "43a3356e-e90e-4edc-b486-c242ca732a6a",
            "a6a21824-928e-4178-9f1a-1adf6b7b7a04"
          ],
          "duration": 940,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c7c782a9-0644-448f-9d71-a0e2cf97e2fe",
          "title": "design_system_page",
          "fullFile": "C:\\src\\codecept_test\\tests\\buttons_test.js",
          "file": "\\tests\\buttons_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "5e46b759-f89c-4b18-8828-d9745c3a439d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: BeforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: BeforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "e04d93c5-3ec2-472e-9490-c9ac819cbb51",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "design_system_page \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "10d7a6b2-5c6a-49fb-b0d0-afc534a480f1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "design_system_page \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "ae5bdab1-42c5-4865-a9b7-47c5a6854e3e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "design_system_page \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "84867584-e35d-4fa7-ba70-0f2258529b2d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "design_system_page \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "7424927d-6af3-4a0b-9244-3313fcd8e8e8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Plain Buttons",
              "fullTitle": "design_system_page: Plain Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.plain;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (let button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "62364181-bf67-4f00-a23c-2447cc8720dd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Hover Buttons",
              "fullTitle": "design_system_page: Hover Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.hover;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (const button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "f9c3a4f6-3df5-4c30-91be-f1a01d785dbf",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Simple Buttons",
              "fullTitle": "design_system_page: Simple Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.click;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (const button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "a2485260-7ab2-4a33-937f-b07ee05c31a8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "62364181-bf67-4f00-a23c-2447cc8720dd",
            "f9c3a4f6-3df5-4c30-91be-f1a01d785dbf",
            "a2485260-7ab2-4a33-937f-b07ee05c31a8"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "f617206b-4486-4b81-b17f-575bbb555197",
          "title": "design_system_page",
          "fullFile": "C:\\src\\codecept_test\\tests\\data_test.js",
          "file": "\\tests\\data_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "6c075dda-a414-4689-8210-c1690eeccfbf",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook",
              "fullTitle": "design_system_page \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Before All\");",
              "err": {},
              "uuid": "c658cbc3-5a87-48bd-9513-463140936eba",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "design_system_page \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "abf96622-882b-498e-a9cd-05389a075b61",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "design_system_page \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "ef85ca94-a8ac-444d-8516-7cc7f92c0d27",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "design_system_page \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "f7423ad6-f115-428f-9e52-32efe35c7d1a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "design_system_page \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "76f5ed3f-6b00-4a8c-819d-5ed3be441a9a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Data Test | {\"id\":1}",
              "fullTitle": "design_system_page: Data Test | {\"id\":1}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "e91c373d-2b53-4c09-b816-95e2218cd15b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Data Test | {\"id\":2}",
              "fullTitle": "design_system_page: Data Test | {\"id\":2}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "f9fb4d04-561a-4cee-a895-950897c9c8d5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Data Test | {\"id\":3}",
              "fullTitle": "design_system_page: Data Test | {\"id\":3}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "bef6634c-af46-4973-9931-893736abbe02",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Data Test | {\"id\":4}",
              "fullTitle": "design_system_page: Data Test | {\"id\":4}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "50c05482-6f48-4d99-b104-39fa89e4c7fa",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Data Test | {\"id\":5}",
              "fullTitle": "design_system_page: Data Test | {\"id\":5}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "b2076cfa-3968-4cca-a659-d245e3213a4f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e91c373d-2b53-4c09-b816-95e2218cd15b",
            "f9fb4d04-561a-4cee-a895-950897c9c8d5",
            "bef6634c-af46-4973-9931-893736abbe02",
            "50c05482-6f48-4d99-b104-39fa89e4c7fa",
            "b2076cfa-3968-4cca-a659-d245e3213a4f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "5d2d8bf4-6bd5-427c-bed8-99d1211625dd",
          "title": "design_system_page",
          "fullFile": "C:\\src\\codecept_test\\tests\\ds_page_test.js",
          "file": "\\tests\\ds_page_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "bae263db-d21b-442b-9898-81caba3584f4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "design_system_page \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "ddeb1c9e-f193-432b-b061-f7fbc66ceb46",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "design_system_page \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "09fc5042-a9bf-42b4-83f8-ed83b698d3cd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "design_system_page \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "bcabffad-736f-48f6-905a-2a5a3b604e6f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "design_system_page \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "143b8b5c-4e9e-44fe-848d-295c1ae566b7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Plain Buttons",
              "fullTitle": "design_system_page: Plain Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.plain;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (let button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "f18b300c-cd26-4f9a-bd99-9c2c77551a6c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Hover Buttons",
              "fullTitle": "design_system_page: Hover Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.hover;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (const button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "7ec22bff-d2ad-4ca6-942a-969749947299",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Simple Buttons",
              "fullTitle": "design_system_page: Simple Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.click;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (const button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "29058b8e-ec06-40ea-9485-78de38041b5c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f18b300c-cd26-4f9a-bd99-9c2c77551a6c",
            "7ec22bff-d2ad-4ca6-942a-969749947299",
            "29058b8e-ec06-40ea-9485-78de38041b5c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "./reports/mocha"
      },
      "version": "5.1.0"
    }
  }
}