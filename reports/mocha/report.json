{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2020-06-18T17:57:25.584Z",
    "end": "2020-06-18T17:57:36.488Z",
    "duration": 10904,
    "testsRegistered": 16,
    "passPercent": 31.25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 11,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "db6aefe7-0950-4a44-b77e-336d71688d97",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "edc6aadd-7843-44d1-a900-ac88c5527c35",
          "title": "design_system_page",
          "fullFile": "C:\\src\\codecept_test\\tests\\buttons_allure_test.js",
          "file": "\\tests\\buttons_allure_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "31416874-19e7-437f-93ad-3ca6f17f8a5a",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "design_system_page \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 337,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "0a35876b-ee80-478e-a491-901d8a6ea011",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "design_system_page \"before each\" hook: Before",
              "timedOut": false,
              "duration": 429,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I.amOnPage(demo_page_url);",
              "err": {},
              "uuid": "b253e4ec-6e03-4ae0-8eed-22cfaaf05574",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "design_system_page \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "13a7f94d-5e54-43d7-b21f-ff420f3b2f8c",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "design_system_page \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 162,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "30f9a996-783f-4538-8b54-ee5fb9810ec9",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Verify each button without any action @buttons @simple @element",
              "fullTitle": "design_system_page: Verify each button without any action @buttons @simple @element",
              "timedOut": false,
              "duration": 1194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let filePrefix = locators.prefix.plain;\nconsole.log(\"Number of elements\"+numOfElements);\n  \nfor (let current=1; current<=numOfElements; current++) {\n    let btnSelector = elemTemplateSelector.getCurrent(current);\n    let btnText = await I.grabTextFrom(btnSelector);\n    let screenshotName = filePrefix + btnText.toFileName(); \n// Taking Screenshot\n    I.screenshotElement(btnSelector, screenshotName);\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotName+\".png\", {prepareBaseImage: false, tolerance: 0}); \n    }\n}",
              "err": {},
              "uuid": "b118d68c-46c9-460b-ac91-493ceffe5763",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify each button on mouse over @buttons @action @hover @element",
              "fullTitle": "design_system_page: Verify each button on mouse over @buttons @action @hover @element",
              "timedOut": false,
              "duration": 1701,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let filePrefix = locators.prefix.hover;\nconsole.log(\"Number of elements\"+numOfElements);\n  \nfor (let current=1; current<=numOfElements; current++) {\n    let btnSelector = elemTemplateSelector.getCurrent(current);\n    let btnText = await I.grabTextFrom(btnSelector);\n    let screenshotName = filePrefix + btnText.toFileName(); \n// Moving Mouse to Element\n    I.moveCursorTo(btnSelector,5,5);\n  // Taking Screenshot\n    I.screenshotElement(btnSelector, screenshotName);\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotName+\".png\", {prepareBaseImage: false, tolerance: 0}); \n    }\n}",
              "err": {},
              "uuid": "c83c8818-659b-4c1d-bd47-a50f0e6f431c",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify each button on click @buttons @action @click @element",
              "fullTitle": "design_system_page: Verify each button on click @buttons @action @click @element",
              "timedOut": false,
              "duration": 1753,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let filePrefix = locators.prefix.click;\nconsole.log(\"Number of elements\"+numOfElements);\n  \nfor (let current=1; current<=numOfElements; current++) {\n    let btnSelector = elemTemplateSelector.getCurrent(current);\n    let btnText = await I.grabTextFrom(btnSelector);\n    let screenshotName = filePrefix + btnText.toFileName(); \n// Click on Element\n    I.click(btnSelector);\n  // Taking Screenshot\n    I.screenshotElement(btnSelector, screenshotName);\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotName+\".png\", {prepareBaseImage: false, tolerance: 0}); \n    }\n}",
              "err": {},
              "uuid": "ff860939-3c0d-4ff0-a6e9-10eae473a8db",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify block of buttons @buttons @simple @block",
              "fullTitle": "design_system_page: Verify block of buttons @buttons @simple @block",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let blockSelector = \"#testblock\";\nlet screenshotName = \"Btns_Block\";\n  // Taking Screenshot\n    I.screenshotElement(blockSelector, screenshotName);\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotName+\".png\", {prepareBaseImage: false, tolerance: 0}); \n}",
              "err": {},
              "uuid": "88176ef4-baff-457b-8d35-0cb914eefe7b",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify top and bottom part of the page @buttons @simple @pagetest",
              "fullTitle": "design_system_page: Verify top and bottom part of the page @buttons @simple @pagetest",
              "timedOut": false,
              "duration": 976,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let screenshotNameTop = \"Btns_Page_Top.png\";\nlet screenshotNameBottom = \"Btns_Page_Bottom.png\";\n// Scrolling to Top and Taking Screenshot \n    I.scrollPageToTop();\n    I.saveScreenshot(screenshotNameTop,false);\n// Scrolling to Bottom and Taking Screenshot \n    I.scrollPageToBottom();\n    I.saveScreenshot(screenshotNameBottom,false);\n// Comparing both previously taken screenshots\n    if (compareFlag) { \n        I.seeVisualDiff(screenshotNameTop, {prepareBaseImage: false, tolerance: 0}); \n        I.seeVisualDiff(screenshotNameBottom, {prepareBaseImage: false, tolerance: 0}); \n    }",
              "err": {},
              "uuid": "7206d735-2201-44af-890a-50da9f8dab0c",
              "parentUUID": "edc6aadd-7843-44d1-a900-ac88c5527c35",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b118d68c-46c9-460b-ac91-493ceffe5763",
            "c83c8818-659b-4c1d-bd47-a50f0e6f431c",
            "ff860939-3c0d-4ff0-a6e9-10eae473a8db",
            "88176ef4-baff-457b-8d35-0cb914eefe7b",
            "7206d735-2201-44af-890a-50da9f8dab0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5908,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "76ea8f39-a5e8-4b69-844e-25b26b4df224",
          "title": "design_system_page",
          "fullFile": "C:\\src\\codecept_test\\tests\\buttons_test.js",
          "file": "\\tests\\buttons_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "ffe909df-e470-4dc7-bfe3-bed459dc4771",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: BeforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: BeforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "d1d84ae6-f633-473e-87f9-96f1102785e0",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "design_system_page \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "d41ae55b-7886-46e2-8b65-13b0c1aa956b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "design_system_page \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "cb2b5fa9-b2d9-4ecb-bb4e-cb4de2b2ceaf",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "design_system_page \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "e094a3a4-c58f-4dba-9aca-7c54f5ebaa6a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "design_system_page \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "48818810-6a8e-40c5-acc8-bec8aa614f4a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Plain Buttons",
              "fullTitle": "design_system_page: Plain Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.plain;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (let button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "c2bcfa79-a319-4455-80dd-976e59d014b5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Hover Buttons",
              "fullTitle": "design_system_page: Hover Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.hover;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (const button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "227919aa-498f-4ee0-ac05-8252792b9a80",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Simple Buttons",
              "fullTitle": "design_system_page: Simple Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.click;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (const button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "2a57e776-ace9-4201-961c-c5c77d06fabe",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c2bcfa79-a319-4455-80dd-976e59d014b5",
            "227919aa-498f-4ee0-ac05-8252792b9a80",
            "2a57e776-ace9-4201-961c-c5c77d06fabe"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "7dc4fe2f-b6ce-46cb-93e6-61431362c32e",
          "title": "design_system_page",
          "fullFile": "C:\\src\\codecept_test\\tests\\data_test.js",
          "file": "\\tests\\data_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "ec8e4f1f-a9a9-418e-ac3c-9be39775d7cd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook",
              "fullTitle": "design_system_page \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Before All\");",
              "err": {},
              "uuid": "47c99df9-095f-4e85-b4a0-6a7d0b485ae7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "design_system_page \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "1452681b-d5c6-49cc-b1fe-424503fab770",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "design_system_page \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "48a989d7-b63b-4f8e-b7ac-30b720cb1552",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "design_system_page \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "885878e4-e7e7-4f87-aa0e-4949ff7187b4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "design_system_page \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "6fb67a15-a920-4586-ad31-958443f69b92",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Data Test | {\"id\":1}",
              "fullTitle": "design_system_page: Data Test | {\"id\":1}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "7a4827d5-e66d-458b-bbfb-54e9fe3b3e19",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Data Test | {\"id\":2}",
              "fullTitle": "design_system_page: Data Test | {\"id\":2}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "6f9c0bb2-7f1c-4442-8cca-8fe4d0b69927",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Data Test | {\"id\":3}",
              "fullTitle": "design_system_page: Data Test | {\"id\":3}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "09c65894-69b1-46a1-a26f-44e1c293b2c4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Data Test | {\"id\":4}",
              "fullTitle": "design_system_page: Data Test | {\"id\":4}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "261ed03c-86ca-4cd0-b1fb-e08a76783c0c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Data Test | {\"id\":5}",
              "fullTitle": "design_system_page: Data Test | {\"id\":5}",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Current value is:\"+ current.id);",
              "err": {},
              "uuid": "185fc8ae-c19f-4100-80fc-86736d78a197",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "7a4827d5-e66d-458b-bbfb-54e9fe3b3e19",
            "6f9c0bb2-7f1c-4442-8cca-8fe4d0b69927",
            "09c65894-69b1-46a1-a26f-44e1c293b2c4",
            "261ed03c-86ca-4cd0-b1fb-e08a76783c0c",
            "185fc8ae-c19f-4100-80fc-86736d78a197"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ea32bf58-ab8d-4ccf-a783-e82363185ca0",
          "title": "design_system_page",
          "fullFile": "C:\\src\\codecept_test\\tests\\ds_page_test.js",
          "file": "\\tests\\ds_page_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "design_system_page \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "26498739-260a-494f-9624-276a7aae13f3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "design_system_page \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "5b59bd9c-8293-4840-9d62-40bc2e0b75d2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before",
              "fullTitle": "design_system_page \"before each\" hook: Before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.apply(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.apply(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "148354a8-9e64-4c53-adcc-92a6fb392076",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "design_system_page \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "0ee83552-9561-440d-974a-47c4a01cb194",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "design_system_page \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "b702a50f-4a54-4451-9bb3-5d01d632fb66",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Plain Buttons",
              "fullTitle": "design_system_page: Plain Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.plain;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (let button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "f450d8b3-5e68-49ad-ba8b-4ec575c13ec4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Hover Buttons",
              "fullTitle": "design_system_page: Hover Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.hover;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (const button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "4119deb4-dd1c-448f-8e49-e1da914ed014",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Simple Buttons",
              "fullTitle": "design_system_page: Simple Buttons",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let compareFlag = true;\nlet filePrefix = locators.prefix.click;\nlet buttons = await I.grabAttributeFrom(locators.buttons)\nfor (const button in buttons) {\n    I.verifyScreenshot(button, filePrefix, compareFlag)\n}",
              "err": {},
              "uuid": "76e724a6-5b9a-4057-a9dc-846f06f25118",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f450d8b3-5e68-49ad-ba8b-4ec575c13ec4",
            "4119deb4-dd1c-448f-8e49-e1da914ed014",
            "76e724a6-5b9a-4057-a9dc-846f06f25118"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "./reports/mocha",
        "reportFilename": "report"
      },
      "version": "5.1.0"
    }
  }
}